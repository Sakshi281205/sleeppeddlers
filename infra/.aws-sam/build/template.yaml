AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: "sleeppeddlers \u2013 API + S3 + Lambda flow with DLQs, metrics, validation,\
  \ tracing"
Parameters:
  BucketName:
    Type: String
  ApiKeyValue:
    Type: String
  AllowOrigin:
    Type: String
    Default: '*'
  AiLambdaName:
    Type: String
    Default: ai-analysis-function
  LlmLambdaName:
    Type: String
    Default: llm-processing-function
Globals:
  Function:
    Runtime: python3.11
    Timeout: 15
    MemorySize: 512
    Tracing: Active
    Environment:
      Variables:
        BUCKET_NAME:
          Ref: BucketName
        AI_LAMBDA_NAME:
          Ref: AiLambdaName
        LLM_LAMBDA_NAME:
          Ref: LlmLambdaName
        LOG_LEVEL: INFO
    DeadLetterQueue:
      Type: SQS
      TargetArn:
        Fn::GetAtt:
        - GlobalDLQ
        - Arn
  Api:
    TracingEnabled: true
    AccessLogSetting:
      DestinationArn:
        Fn::GetAtt:
        - ApiAccessLogGroup
        - Arn
      Format: "{\n  \"requestId\":\"$context.requestId\",\n  \"ip\":\"$context.identity.sourceIp\"\
        ,\n  \"caller\":\"$context.identity.caller\",\n  \"user\":\"$context.identity.user\"\
        ,\n  \"requestTime\":\"$context.requestTime\",\n  \"httpMethod\":\"$context.httpMethod\"\
        ,\n  \"resourcePath\":\"$context.resourcePath\",\n  \"status\":\"$context.status\"\
        ,\n  \"protocol\":\"$context.protocol\",\n  \"responseLength\":\"$context.responseLength\"\
        \n}\n"
Resources:
  DataBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Ref: BucketName
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
        - Id: ExpireTemp
          Status: Enabled
          Prefix: uploads/
          ExpirationInDays: 7
        - Id: ExpireIntermediates
          Status: Enabled
          Prefix: ai-results/
          ExpirationInDays: 14
  ApiAccessLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/apigw/sleeppeddlers
      RetentionInDays: 7
  ApiGatewayCloudWatchLogsRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: apigw-cloudwatch-logs-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: apigateway.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: ApiGatewayCWLogs
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:DescribeLogGroups
            - logs:DescribeLogStreams
            - logs:PutLogEvents
            Resource: '*'
  ApiGatewayAccount:
    Type: AWS::ApiGateway::Account
    DependsOn: ApiGatewayCloudWatchLogsRole
    Properties:
      CloudWatchRoleArn:
        Fn::GetAtt:
        - ApiGatewayCloudWatchLogsRole
        - Arn
  GlobalDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: sleeppeddlers-dlq
      MessageRetentionPeriod: 1209600
  Api:
    Type: AWS::Serverless::Api
    DependsOn:
    - ApiGatewayAccount
    Properties:
      Name: sleeppeddlers-api
      StageName: prod
      Cors:
        AllowMethods: '''GET,POST,OPTIONS'''
        AllowHeaders: '''Content-Type,x-api-key'''
        AllowOrigin:
          Fn::Sub: '''${AllowOrigin}'''
      Auth:
        ApiKeyRequired: true
      MethodSettings:
      - ResourcePath: /*
        HttpMethod: '*'
        MetricsEnabled: true
        LoggingLevel: INFO
        DataTraceEnabled: false
        ThrottlingRateLimit: 50
        ThrottlingBurstLimit: 25
      AccessLogSetting:
        DestinationArn:
          Fn::GetAtt:
          - ApiAccessLogGroup
          - Arn
        Format: '{ "requestId":"$context.requestId","ip":"$context.identity.sourceIp","caller":"$context.identity.caller","user":"$context.identity.user","requestTime":"$context.requestTime","httpMethod":"$context.httpMethod","resourcePath":"$context.resourcePath","status":"$context.status","protocol":"$context.protocol","responseLength":"$context.responseLength"
          }'
  ApiKey:
    Type: AWS::ApiGateway::ApiKey
    Properties:
      Enabled: true
      Name: sleeppeddlers-api-key
      Value:
        Ref: ApiKeyValue
  UsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    DependsOn:
    - Api
    - ApiprodStage
    Properties:
      UsagePlanName: sleeppeddlers-plan
      Throttle:
        RateLimit: 50
        BurstLimit: 25
      Quota:
        Limit: 100000
        Period: MONTH
      ApiStages:
      - ApiId:
          Ref: Api
        Stage: prod
  UsagePlanKey:
    Type: AWS::ApiGateway::UsagePlanKey
    Properties:
      KeyId:
        Ref: ApiKey
      KeyType: API_KEY
      UsagePlanId:
        Ref: UsagePlan
  UploadApi:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: upload-api-handler
      CodeUri: UploadApi
      Handler: handler.lambda_handler
      Policies:
      - S3CrudPolicy:
          BucketName:
            Ref: BucketName
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /upload
            Method: post
            RestApiId:
              Ref: Api
            Auth:
              ApiKeyRequired: true
    Metadata:
      SamResourceId: UploadApi
  StatusApi:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: status-api-handler
      CodeUri: StatusApi
      Handler: handler.lambda_handler
      Policies:
      - S3ReadPolicy:
          BucketName:
            Ref: BucketName
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /status/{job_id}
            Method: get
            RestApiId:
              Ref: Api
            Auth:
              ApiKeyRequired: true
    Metadata:
      SamResourceId: StatusApi
  ResultsApi:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: results-api-handler
      CodeUri: ResultsApi
      Handler: handler.lambda_handler
      Policies:
      - S3ReadPolicy:
          BucketName:
            Ref: BucketName
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /results/{job_id}
            Method: get
            RestApiId:
              Ref: Api
            Auth:
              ApiKeyRequired: true
    Metadata:
      SamResourceId: ResultsApi
  MedicalProcessorFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: medical-processor
      CodeUri: MedicalProcessorFunction
      Handler: handler.lambda_handler
      Policies:
      - S3CrudPolicy:
          BucketName:
            Ref: BucketName
      - CloudWatchPutMetricPolicy: {}
      - Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - lambda:InvokeFunction
          Resource:
            Fn::GetAtt:
            - AiAnalysisFunction
            - Arn
      Events:
        UploadS3Event:
          Type: S3
          Properties:
            Bucket:
              Ref: DataBucket
            Events: s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                - Name: prefix
                  Value: uploads/
    Metadata:
      SamResourceId: MedicalProcessorFunction
  AiAnalysisFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Ref: AiLambdaName
      CodeUri: AiAnalysisFunction
      Handler: handler.lambda_handler
      Policies:
      - S3CrudPolicy:
          BucketName:
            Ref: BucketName
      - Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - lambda:InvokeFunction
          Resource:
            Fn::GetAtt:
            - LlmProcessingFunction
            - Arn
    Metadata:
      SamResourceId: AiAnalysisFunction
  LlmProcessingFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Ref: LlmLambdaName
      CodeUri: LlmProcessingFunction
      Handler: handler.lambda_handler
      Policies:
      - S3CrudPolicy:
          BucketName:
            Ref: BucketName
    Metadata:
      SamResourceId: LlmProcessingFunction
Outputs:
  ApiBaseUrl:
    Value:
      Fn::Sub: https://${Api}.execute-api.${AWS::Region}.amazonaws.com/prod
