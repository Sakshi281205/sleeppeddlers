AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: sleeppeddlers – API + S3 + Lambda flow with DLQs, metrics, validation, tracing

Parameters:
  BucketName:
    Type: String
  ApiKeyValue:
    Type: String
  AllowOrigin:
    Type: String
    Default: "*"
  AiLambdaName:
    Type: String
    Default: ai-analysis-function
  LlmLambdaName:
    Type: String
    Default: llm-processing-function

Globals:
  Function:
    Runtime: python3.11
    Timeout: 15
    MemorySize: 512
    Tracing: Active
    Environment:
      Variables:
        BUCKET_NAME: !Ref BucketName
        AI_LAMBDA_NAME: !Ref AiLambdaName
        LLM_LAMBDA_NAME: !Ref LlmLambdaName
        LOG_LEVEL: INFO
    DeadLetterQueue:
      Type: SQS
      TargetArn: !GetAtt GlobalDLQ.Arn

  Api:
    TracingEnabled: true
    AccessLogSetting:
      DestinationArn: !GetAtt ApiAccessLogGroup.Arn
      Format: |
        {
          "requestId":"$context.requestId",
          "ip":"$context.identity.sourceIp",
          "caller":"$context.identity.caller",
          "user":"$context.identity.user",
          "requestTime":"$context.requestTime",
          "httpMethod":"$context.httpMethod",
          "resourcePath":"$context.resourcePath",
          "status":"$context.status",
          "protocol":"$context.protocol",
          "responseLength":"$context.responseLength"
        }

Resources:

  # ---------- S3 Bucket ----------
  DataBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref BucketName
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          - Id: ExpireTemp
            Status: Enabled
            Prefix: uploads/
            ExpirationInDays: 7
          - Id: ExpireIntermediates
            Status: Enabled
            Prefix: ai-results/
            ExpirationInDays: 14

  # ---------- Logging ----------
  ApiAccessLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/apigw/sleeppeddlers
      RetentionInDays: 7

  # ---------- API Gateway → CloudWatch Logs role & account binding ----------
  ApiGatewayCloudWatchLogsRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: apigw-cloudwatch-logs-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: ApiGatewayCWLogs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                  - logs:PutLogEvents
                Resource: '*'

  ApiGatewayAccount:
    Type: AWS::ApiGateway::Account
    DependsOn: ApiGatewayCloudWatchLogsRole
    Properties:
      CloudWatchRoleArn: !GetAtt ApiGatewayCloudWatchLogsRole.Arn

  GlobalDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: sleeppeddlers-dlq
      MessageRetentionPeriod: 1209600  # 14 days

  # ---------- API Gateway ----------
  Api:
    Type: AWS::Serverless::Api
    DependsOn:
      - ApiGatewayAccount
    Properties:
      Name: sleeppeddlers-api
      StageName: prod
      Cors:
        AllowMethods: "'GET,POST,OPTIONS'"
        AllowHeaders: "'Content-Type,x-api-key'"
        AllowOrigin: !Sub "'${AllowOrigin}'"
      Auth:
        ApiKeyRequired: true
      MethodSettings:
        - ResourcePath: '/*'
          HttpMethod: '*'
          MetricsEnabled: true
          LoggingLevel: INFO
          DataTraceEnabled: false
          ThrottlingRateLimit: 50
          ThrottlingBurstLimit: 25
      AccessLogSetting:
        DestinationArn: !GetAtt ApiAccessLogGroup.Arn
        Format: '{ "requestId":"$context.requestId","ip":"$context.identity.sourceIp","caller":"$context.identity.caller","user":"$context.identity.user","requestTime":"$context.requestTime","httpMethod":"$context.httpMethod","resourcePath":"$context.resourcePath","status":"$context.status","protocol":"$context.protocol","responseLength":"$context.responseLength" }'

  ApiKey:
    Type: AWS::ApiGateway::ApiKey
    Properties:
      Enabled: true
      Name: sleeppeddlers-api-key
      Value: !Ref ApiKeyValue

  UsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    DependsOn:
      - Api
      - ApiprodStage
    Properties:
      UsagePlanName: sleeppeddlers-plan
      Throttle:
        RateLimit: 50
        BurstLimit: 25
      Quota:
        Limit: 100000
        Period: MONTH
      ApiStages:
        - ApiId: !Ref Api
          Stage: prod

  UsagePlanKey:
    Type: AWS::ApiGateway::UsagePlanKey
    Properties:
      KeyId: !Ref ApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref UsagePlan

  # ---------- Lambda Functions ----------

  # Upload API Lambda
  UploadApi:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: upload-api-handler
      CodeUri: ../lambdas/upload_api/
      Handler: handler.lambda_handler
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref BucketName
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /upload
            Method: post
            RestApiId: !Ref Api
            Auth:
              ApiKeyRequired: true

  # Status API Lambda
  StatusApi:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: status-api-handler
      CodeUri: ../lambdas/status_api/
      Handler: handler.lambda_handler
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref BucketName
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /status/{job_id}
            Method: get
            RestApiId: !Ref Api
            Auth:
              ApiKeyRequired: true

  # Results API Lambda
  ResultsApi:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: results-api-handler
      CodeUri: ../lambdas/results_api/
      Handler: handler.lambda_handler
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref BucketName
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /results/{job_id}
            Method: get
            RestApiId: !Ref Api
            Auth:
              ApiKeyRequired: true

  # Medical Processor Lambda triggered by S3 upload
  MedicalProcessorFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: medical-processor
      CodeUri: ../lambdas/medical_processor/
      Handler: handler.lambda_handler
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref BucketName
        - CloudWatchPutMetricPolicy: {}
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action: [ 'lambda:InvokeFunction' ]
              Resource: !GetAtt AiAnalysisFunction.Arn
      Events:
        UploadS3Event:
          Type: S3
          Properties:
            Bucket: !Ref DataBucket
            Events: s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                  - Name: prefix
                    Value: uploads/

  # AI Analysis Lambda
  AiAnalysisFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Ref AiLambdaName
      CodeUri: ../lambdas/ai_analysis/
      Handler: handler.lambda_handler
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref BucketName
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action: [ 'lambda:InvokeFunction' ]
              Resource: !GetAtt LlmProcessingFunction.Arn

  # LLM Processing Lambda
  LlmProcessingFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Ref LlmLambdaName
      CodeUri: ../lambdas/llm_processing/
      Handler: handler.lambda_handler
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref BucketName

Outputs:
  ApiBaseUrl:
    Value: !Sub "https://${Api}.execute-api.${AWS::Region}.amazonaws.com/prod"

Parameters:
  IBMApiKey:
    Type: String
  IBMProjectId:
    Type: String
  IBMInstanceId:
    Type: String
  IBMUrl:
    Type: String
    Default: "https://us-south.ml.cloud.ibm.com"

Resources:
  LlmLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: llm-processing-function
      Handler: llm_processor.lambda_handler
      Runtime: python3.9
      Timeout: 300
      MemorySize: 1024
      CodeUri: llm_lambda/
      Environment:
        Variables:
          IBM_API_KEY: !Ref IBMApiKey
          IBM_PROJECT_ID: !Ref IBMProjectId
          IBM_INSTANCE_ID: !Ref IBMInstanceId
          IBM_URL: !Ref IBMUrl

